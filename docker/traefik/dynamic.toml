
# [tls.stores]
#     [tls.stores.default]
#         [tls.stores.default.defaultCertificate]
#             certFile = "/cert/sso.crt"
#             keyFile  = "/cert/sso.key"

# # Mutual TLS.
# # <https://docs.traefik.io/https/tls/#client-authentication-mtls>
# [tls.options]
#     [tls.options.default]
#         [tls.options.default.clientAuth]
#             caFiles = ["/cert/root_ca.crt"]
#             clientAuthType = "NoClientCert"

[http.routers]
    [http.routers.ssoOpenapiRouter]
        entrypoints = ["ssoEntrypoint"]
        rule = "PathPrefix(`/api`)"
        middlewares = ["ssoOpenapiStripprefixMiddleware", "ssoForwardauthMiddleware"]
        service = "ssoOpenapiService"
        # [http.routers.ssoOpenapiRouter.tls]

    [http.routers.ssoGrpcRouter]
        entrypoints = ["ssoEntrypoint"]
        rule = "PathPrefix(`/`)"
        middlewares = ["ssoForwardauthMiddleware"]
        service = "ssoGrpcService"
        # [http.routers.ssoGrpcRouter.tls]

    [http.routers.prometheusRouter]
        entrypoints = ["ssoEntrypoint"]
        rule = "Host(`prometheus.localhost`)"
        service = "prometheusService"

[http.services]
    [http.services.ssoOpenapiService.loadBalancer]
        [[http.services.ssoOpenapiService.loadBalancer.servers]]
            url = "http://sso-openapi:8042"

    [http.services.ssoGrpcService.loadBalancer]
        [[http.services.ssoGrpcService.loadBalancer.servers]]
            url = "h2c://sso-grpc:7042"

    [http.services.prometheusService.loadBalancer]
        [[http.services.prometheusService.loadBalancer.servers]]
            url = "http://prometheus:9090"

[http.middlewares]
    [http.middlewares.ssoOpenapiStripprefixMiddleware.stripPrefix]
        prefixes = ["/api"]

    [http.middlewares.ssoForwardauthMiddleware.forwardAuth]
        address = "http://sso-grpc:7043/hook/traefik/self"
        trustForwardHeader = false
        authResponseHeaders = ["Grpc-Metadata-Sso-Key-Id","Grpc-Metadata-Sso-Service-Id","Grpc-Metadata-Sso-User-Key-Id","Grpc-Metadata-Sso-User-Id"]

# [tcp.routers]
#     [tcp.routers.postgresRouter]
#         entrypoints = ["postgresEntrypoint"]
#         rule = "HostSNI(`*`)"
#         service = "postgresService"

# [tcp.services]
#     [tcp.services.postgresService.loadBalancer]
#         [[tcp.services.postgresService.loadBalancer.servers]]
#             address = "postgres:5432"
