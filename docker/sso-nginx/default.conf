# TODO(sam,docs): nginx configuration and Dockerfile example.
# http {
#     # HTTPS and headers configuration.
#     # https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/
#     # https://www.owasp.org/index.php/OWASP_Secure_Headers_Project
#     # API request rate limit.
#     # https://www.nginx.com/blog/rate-limiting-nginx/
#     limit_req_zone $binary_remote_addr zone=api_zone:10m rate=50r/s;
#     # API proxy server.
#     # https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/
#     location /api {
#         limit_req zone=api_zone burst=100 nodelay;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_pass http://127.0.0.1:4000;
#     }
# }

# Sso OpenAPI server(s).
upstream sso_openapi_server {
    server  sso-openapi:8042;
}

server {
    listen       80;
    server_name  localhost;

    # OpenAPI HTTP proxy.
    location /api/ {
        # CORS configuration.
        # TODO(sam,refactor): CORS and other security checks and improvements.
        # <https://enable-cors.org/server_nginx.html>
        # <https://github.com/grpc-ecosystem/grpc-gateway/blob/master/examples/gateway/handlers.go>
        if ($request_method = 'OPTIONS') {
            add_header  Access-Control-Allow-Origin   '*' always;
            add_header  Access-Control-Allow-Methods  'GET,POST,PATCH,DELETE,OPTIONS';
            add_header  Access-Control-Allow-Headers  'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header  Access-Control-Max-Age        1728000;
            add_header  Content-Type                  'text/plain; charset=utf-8';
            add_header  Content-Length                0;
            return 204;
        }
        if ($request_method = 'GET') {
            add_header  Access-Control-Allow-Origin    '*' always;
            add_header  Access-Control-Allow-Methods   'GET,POST,PATCH,DELETE,OPTIONS';
            add_header  Access-Control-Allow-Headers   'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header  Access-Control-Expose-Headers  'Content-Length,Content-Range,Grpc-Status,Grpc-Message';
        }
        if ($request_method = 'POST') {
            add_header  Access-Control-Allow-Origin    '*' always;
            add_header  Access-Control-Allow-Methods   'GET,POST,PATCH,DELETE,OPTIONS';
            add_header  Access-Control-Allow-Headers   'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header  Access-Control-Expose-Headers  'Content-Length,Content-Range,Grpc-Status,Grpc-Message';
        }
        if ($request_method = 'PATCH') {
            add_header  Access-Control-Allow-Origin    '*' always;
            add_header  Access-Control-Allow-Methods   'GET,POST,PATCH,DELETE,OPTIONS';
            add_header  Access-Control-Allow-Headers   'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header  Access-Control-Expose-Headers  'Content-Length,Content-Range,Grpc-Status,Grpc-Message';
        }
        if ($request_method = 'DELETE') {
            add_header  Access-Control-Allow-Origin    '*' always;
            add_header  Access-Control-Allow-Methods   'GET,POST,PATCH,DELETE,OPTIONS';
            add_header  Access-Control-Allow-Headers   'Authorization,DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header  Access-Control-Expose-Headers  'Content-Length,Content-Range,Grpc-Status,Grpc-Message';
        }

        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header  Host             $host;
        proxy_set_header  Origin           $http_origin;
        proxy_pass        http://sso_openapi_server/;
    }

    # TODO(sam,refactor): Rate limiting, gRPC proxy (SSL?).

    # redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
