Todo:
  Todo:
    ☐ @high Check, test and refactor register and register confirm implementation.
        If any key already exists for service, do not create one.
        Add tests to check whether this flow can be used by used to access disabled user.
    ☐ @high Update `sentry` and `env_logger` dependencies when able to publish with `0.18`.
    ☐ @low Handle more audit headers.
        x-forwarded-host, x-forwarded-uri, x-real-ip.
    ☐ @low JWT handling improvements.
        https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html
    ☐ @low Improve service list query options.
        Name ge/le options
    ☐ @low Improve usability, composability of pattern functions, reduce duplicate authentication code.
        Diesel async?
        https://github.com/diesel-rs/diesel/issues/2084
        Improve translation code between driver/grpc, unwrap check and cleanup.
        Improve code structure, driver/grpc interfaces (reduce repetition).
        Authentication mechanism code is split across files, cleaner code.
    ☐ @low Service flags to allow access to endpoints.
        Trusted vs untrusted services?
    ☐ @low OpenAPI gateway graceful shutdown, exit code is 2, should be 0.
    ✔ OpenAPI gateway CORS headers, check if override at proxy level works. @done(20-03-07)
    ✔ Crate dependency upgrades. @done(20-02-26)
    ✔ Server and client TLS support.
    ✔ Sso async client configurable headers per client for upstream use.

  Documentation:
    ☐ Check CORS and other security headers using OWASP secure headers project.
    ☐ Prometheus alert rule for high CPU usage.
        How to get maximum for seconds over time?
    ☐ Manual guides check and other documentation, update where required.
    ☐ Manual revoke email update guide.
    ☐ Manual CLI guide, improved CLI commands.
    ☐ Systemd unit file examples, sso, postgres, etc.
    ☐ Kubernetes deployment examples, improved documentation.
    ☐ Mutual TLS using rustls configuration and PKI for communication between services.
    ☐ Check this meets key management standard NIST SP 800-57.
    ☐ Evaluate data and identify/classify sensitive data.
    ☐ Mutual TLS encryption/authentication for postgres connection.
    ☐ Some kind of formalised procedures around source code changes.
    ☐ Up to date documentation and definitions of application components, diagrams.
    ✔ Manual style improvements. @done(20-02-29)
    ✔ Traefik rate limiting, forward auth, TLS/HTTPS support.

  Test:
    ☐ Password reset tests using lettre file transport (or write as .json?).
        Service 2 cannot confirm reset password.
        Confirm reset password success.
        User password is updated.
        Cannot reuse token.
    ☐ Traefik forward auth integration tests.
    ☐ Test structural improvements, style update, benchmarks/profiling?
    ☐ More tests for data access, is service data masked correctly.
    ☐ More tests on preventing spoofing, elevation of privelege.
    ☐ Test requests with other/unknown content types are handled correctly.
    ☐ More input tests including unicode passwords, bad strings, etc.
    ✔ Test TLS functionality.

  Developer:
    ☐ Try flamegraph for profiling.
        https://github.com/flamegraph-rs/flamegraph
    ☐ Better library interface, require documentation, embeddable service?
        #![deny(missing_docs)]
    ☐ Further OWASP ASVS reading and notes, current notes out of date.
    ☐ Check downloaded development tool file signatures (see docker images).
    ✔ Improve binaries main code, remove or replace unwrap.

  Features:
    ☐ Handle changes to password hash version.
    ☐ Service IP whitelist.
        https://docs.traefik.io/middlewares/ipwhitelist/
    ☐ Option to enforce provider URLs HTTPS.
        Make this mandatory, how would development work?
        Flag(s) to require HTTPS to ensure all requests/responses are encrypted in transit?
    ☐ Password update cannot set same password.
    ☐ User last login, key last use information (calculate in SQL).
    ☐ User sessions route for active tokens/keys.
    ☐ Email translation/formatting using user locale and timezone, better templates.
    ☐ Audit logging and prometheus metrics improvements for detecting account abuse and breaches.
        Prometheus integration for rule alerts? Emails to user.
    ☐ Support more OAuth2 providers.
    ☐ Webauthn support (libreauth?).
    ☐ Configurable canary routes.
    ☐ Improved public library API interface (gui service as example?).
    ☐ Login from unknown IP address warnings, SMS support?
    ☐ Service/user groups for segmentation.
    ☐ More opt-ins for pathway branches that may be weak, for example ability to reset passwords by email.
    ☐ Structured data for users, may require access controls.
    ☐ GDPR and other data protection compliance research.
    ☐ Constant time responses for authentication endpoints to resist timing attacks.
