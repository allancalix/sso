{
  "swagger": "2.0",
  "info": {
    "title": "Single Sign-on",
    "version": "v1"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/metrics": {
      "get": {
        "summary": "Get server metrics.",
        "description": "Returns metrics in Prometheus exposition format. This endpoint is only available\nvia the HTTP server port of `sso-grpc`. Authentication is not\nrequired, this endpoint is intended for internal use only.",
        "operationId": "Metrics",
        "responses": {
          "200": {
            "description": "The string value.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "tags": [
          "Sso"
        ],
        "security": []
      }
    },
    "/ping": {
      "get": {
        "summary": "Ping server.",
        "description": "Returns pong response for uptime tests. This endpoint is only available\nvia the HTTP server port of `sso-grpc`. Authentication is not\nrequired, this endpoint is intended for internal use only.",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "The string value.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "tags": [
          "Sso"
        ],
        "security": []
      }
    },
    "/v1/audit": {
      "get": {
        "summary": "List audit logs.",
        "description": "All fields are optional.",
        "operationId": "AuditList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuditListReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "ge",
            "description": "Greater than or equal to date and time.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "le",
            "description": "Less than or equal to date and time.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "description": "Limit number of returned logs.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset_id",
            "description": "Offset log UUID for paging.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Log UUID filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "description": "Log type filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "subject",
            "description": "Log subject filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "service_id",
            "description": "Log service UUID filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user_id",
            "description": "Log user UUID filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "post": {
        "summary": "Create audit log.",
        "operationId": "AuditCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuditReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuditCreateRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/audit/{id}": {
      "get": {
        "summary": "Read audit log.",
        "operationId": "AuditRead",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuditReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Log UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "subject",
            "description": "Log subject filter.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "patch": {
        "summary": "Update audit log (append only).",
        "operationId": "AuditUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuditReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Log UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuditUpdateRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/csrf": {
      "get": {
        "summary": "Create CSRF token.",
        "operationId": "AuthCsrfCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthCsrfCreateReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "expires_s",
            "description": "CSRF token expires.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "post": {
        "summary": "Verify CSRF token.",
        "operationId": "AuthCsrfVerify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthAuditReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthCsrfVerifyRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/key/revoke": {
      "post": {
        "summary": "Revoke user key.",
        "operationId": "AuthKeyRevoke",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthAuditReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthKeyRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/key/verify": {
      "post": {
        "summary": "Verify user key.",
        "operationId": "AuthKeyVerify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthKeyReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthKeyRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/github/oauth2": {
      "get": {
        "summary": "Get Github OAuth2 URL.",
        "operationId": "AuthGithubOauth2Url",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthOauth2UrlReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "tags": [
          "Sso"
        ]
      },
      "post": {
        "summary": "Github OAuth2 callback.",
        "operationId": "AuthGithubOauth2Callback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthOauth2CallbackRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/login": {
      "post": {
        "summary": "Login with email and password.",
        "description": "Local provider login authentication.",
        "operationId": "AuthLocalLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthLoginReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthLoginRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/register": {
      "post": {
        "summary": "Register user for service.",
        "description": "Local provider user registration.",
        "operationId": "AuthLocalRegister",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthRegisterRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/register/confirm": {
      "post": {
        "summary": "Confirm user registration.",
        "description": "Local provider user registration confirmation.",
        "operationId": "AuthLocalRegisterConfirm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthPasswordMetaReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthRegisterConfirmRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/register/revoke": {
      "post": {
        "summary": "Revoke user registration.",
        "description": "Local provider user registration revokation.",
        "operationId": "AuthLocalRegisterRevoke",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthAuditReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/reset-password": {
      "post": {
        "summary": "Reset user password.",
        "description": "Local provider reset user password request.",
        "operationId": "AuthLocalResetPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthResetPasswordRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/reset-password/confirm": {
      "post": {
        "summary": "Confirm user password reset.",
        "description": "Local provider reset user password confirmation.",
        "operationId": "AuthLocalResetPasswordConfirm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthPasswordMetaReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthResetPasswordConfirmRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/reset-password/revoke": {
      "post": {
        "summary": "Revoke user password reset.",
        "description": "Local provider reset user password revokation.",
        "operationId": "AuthLocalResetPasswordRevoke",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthAuditReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/update-email": {
      "post": {
        "summary": "Update user email.",
        "description": "Local provider update user email request.",
        "operationId": "AuthLocalUpdateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthUpdateEmailRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/update-email/revoke": {
      "post": {
        "summary": "Revoke user email update.",
        "description": "Local provider update user email revokation.",
        "operationId": "AuthLocalUpdateEmailRevoke",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthAuditReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/update-password": {
      "post": {
        "summary": "Update user password.",
        "description": "Local provider update user password request.",
        "operationId": "AuthLocalUpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthPasswordMetaReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthUpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/local/update-password/revoke": {
      "post": {
        "summary": "Revoke user password update.",
        "description": "Local provider update user password revokation.",
        "operationId": "AuthLocalUpdatePasswordRevoke",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthAuditReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/provider/microsoft/oauth2": {
      "get": {
        "summary": "Get Microsoft OAuth2 URL.",
        "operationId": "AuthMicrosoftOauth2Url",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthOauth2UrlReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "tags": [
          "Sso"
        ]
      },
      "post": {
        "summary": "Microsoft OAuth2 callback.",
        "operationId": "AuthMicrosoftOauth2Callback",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthOauth2CallbackRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/token/refresh": {
      "post": {
        "summary": "Refresh user access and refresh tokens.",
        "operationId": "AuthTokenRefresh",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/token/revoke": {
      "post": {
        "summary": "Revoke user token.",
        "operationId": "AuthTokenRevoke",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthAuditReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/token/verify": {
      "post": {
        "summary": "Verify user access token.",
        "operationId": "AuthTokenVerify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenVerifyReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthTokenRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/auth/totp": {
      "post": {
        "summary": "Verify TOTP code.",
        "operationId": "AuthTotpVerify",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoAuthAuditReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoAuthTotpRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/key": {
      "get": {
        "summary": "List keys.",
        "description": "All fields are optional.",
        "operationId": "KeyList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoKeyListReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "gt",
            "description": "Greater than key UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lt",
            "description": "Less than key UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit number of returned keys.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "Key UUID filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "is_enabled",
            "description": "Key is_enabled flag filter.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "is_revoked",
            "description": "Key is_revoked flag filter.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "type",
            "description": "Key type filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "KEY",
                "TOKEN",
                "TOTP"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "service_id",
            "description": "Key service UUID filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user_id",
            "description": "Key user UUID filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "post": {
        "summary": "Create key.",
        "description": "Service keys can only be created using a root key. If not creating a service key,\nfield `service_id` must not be defined, user keys are always created for the service\nmaking the request.\n\nAvailable keys types are: `Key`, `Token`, `Totp`\n\nRoot and service keys must be `Key` type.\nUsers may only have one enabled and not revoked key where type is `Token`.\nUsers may only have one enabled and not revoked key where type is `Totp`.",
        "operationId": "KeyCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoKeyCreateReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoKeyCreateRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/key/{id}": {
      "get": {
        "summary": "Read key.",
        "operationId": "KeyRead",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoKeyReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Key UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "description": "Key user UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "delete": {
        "summary": "Delete key.",
        "operationId": "KeyDelete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Key UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "user_id",
            "description": "Key user UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "patch": {
        "summary": "Update key.",
        "description": "All fields are optional.",
        "operationId": "KeyUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoKeyReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Key UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoKeyUpdateRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/service": {
      "get": {
        "summary": "List services.",
        "description": "All fields are optional.",
        "operationId": "ServiceList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoServiceListReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "gt",
            "description": "Greater than service UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lt",
            "description": "Less than service UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit number of returned services.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "id",
            "description": "Service UUID filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "is_enabled",
            "description": "Service is_enabled flag filter.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "post": {
        "summary": "Create service.",
        "operationId": "ServiceCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoServiceReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoServiceCreateRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/service/{id}": {
      "get": {
        "summary": "Read service.",
        "operationId": "ServiceRead",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoServiceReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Service UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "delete": {
        "summary": "Delete service.",
        "operationId": "ServiceDelete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Service UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "patch": {
        "summary": "Update service.",
        "description": "All fields are optional.",
        "operationId": "ServiceUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoServiceReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Service UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoServiceUpdateRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/user": {
      "get": {
        "summary": "List users.",
        "description": "All fields are optional.",
        "operationId": "UserList",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoUserListReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "gt",
            "description": "Greater than service UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lt",
            "description": "Less than service UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_ge",
            "description": "Greater than or equal user name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name_le",
            "description": "Less than or equal user name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit number of returned users.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset_id",
            "description": "Offset user UUID for paging.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "description": "User UUID filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "email",
            "description": "User email filter array.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "post": {
        "summary": "Create user.",
        "description": "Users can be created without a password by excluding password related fields\nfrom request.",
        "operationId": "UserCreate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoUserCreateReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoUserCreateRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    },
    "/v1/user/{id}": {
      "get": {
        "summary": "Read user.",
        "operationId": "UserRead",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoUserReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "delete": {
        "summary": "Delete user.",
        "operationId": "UserDelete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Sso"
        ]
      },
      "patch": {
        "summary": "Update user.",
        "description": "All fields are optional.",
        "operationId": "UserUpdate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ssoUserReadReply"
            }
          },
          "400": {
            "description": "Returned when the request is invalid.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "401": {
            "description": "Returned when the request is not authenticated.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "403": {
            "description": "Returned when the request is not permitted.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          },
          "404": {
            "description": "Returned when the requested resource does not exist.",
            "schema": {
              "$ref": "#/definitions/ssoErrorReply"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "User UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ssoUserUpdateRequest"
            }
          }
        ],
        "tags": [
          "Sso"
        ]
      }
    }
  },
  "definitions": {
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "ssoAudit": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at date and time."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at date and time."
        },
        "id": {
          "type": "string",
          "description": "UUID."
        },
        "user_agent": {
          "type": "string",
          "description": "User-agent header (or unknown if not available)."
        },
        "remote": {
          "type": "string",
          "description": "Remote IP address (or unknown if not available)."
        },
        "forwarded": {
          "type": "string",
          "description": "X-forwarded-for header."
        },
        "status_code": {
          "type": "integer",
          "format": "int64",
          "description": "Response status code."
        },
        "type": {
          "type": "string",
          "description": "Type."
        },
        "subject": {
          "type": "string",
          "description": "Subject."
        },
        "data": {
          "type": "object",
          "description": "Key, value data."
        },
        "key_id": {
          "type": "string",
          "description": "Key UUID."
        },
        "service_id": {
          "type": "string",
          "description": "Service UUID."
        },
        "user_id": {
          "type": "string",
          "description": "User UUID."
        },
        "user_key_id": {
          "type": "string",
          "description": "User key UUID."
        }
      },
      "description": "Audit log."
    },
    "ssoAuditCreateRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Log type."
        },
        "subject": {
          "type": "string",
          "description": "Log subject."
        },
        "data": {
          "type": "object",
          "description": "Log key, value data."
        },
        "user_id": {
          "type": "string",
          "description": "Log user UUID."
        },
        "user_key_id": {
          "type": "string",
          "description": "Log user key UUID."
        }
      },
      "description": "Create audit log request."
    },
    "ssoAuditListReply": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ssoAuditListRequest",
          "description": "Request message."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ssoAudit"
          },
          "description": "Logs array."
        }
      },
      "description": "List audit logs reply."
    },
    "ssoAuditListRequest": {
      "type": "object",
      "properties": {
        "ge": {
          "type": "string",
          "format": "date-time",
          "description": "Greater than or equal to date and time."
        },
        "le": {
          "type": "string",
          "format": "date-time",
          "description": "Less than or equal to date and time."
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Limit number of returned logs."
        },
        "offset_id": {
          "type": "string",
          "description": "Offset log UUID for paging."
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Log UUID filter array."
        },
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Log type filter array."
        },
        "subject": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Log subject filter array."
        },
        "service_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Log service UUID filter array."
        },
        "user_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Log user UUID filter array."
        }
      },
      "description": "List audit logs request."
    },
    "ssoAuditReadReply": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ssoAudit",
          "description": "Log."
        }
      },
      "description": "Read audit log reply."
    },
    "ssoAuditUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Log UUID."
        },
        "status_code": {
          "type": "integer",
          "format": "int64",
          "description": "Log status code."
        },
        "subject": {
          "type": "string",
          "description": "Log subject."
        },
        "data": {
          "type": "object",
          "description": "Log key, value data."
        }
      },
      "description": "Update audit log request."
    },
    "ssoAuthAuditReply": {
      "type": "object",
      "properties": {
        "audit": {
          "type": "string",
          "description": "Audit UUID."
        }
      },
      "description": "Authentication audit reply."
    },
    "ssoAuthCsrfCreateReply": {
      "type": "object",
      "properties": {
        "csrf": {
          "$ref": "#/definitions/ssoCsrf",
          "description": "CSRF."
        }
      },
      "description": "Authentication CSRF token."
    },
    "ssoAuthCsrfVerifyRequest": {
      "type": "object",
      "properties": {
        "csrf": {
          "type": "string",
          "description": "CSRF token value."
        },
        "audit": {
          "type": "string",
          "description": "Audit type."
        }
      },
      "description": "Authentication verify CSRF token request."
    },
    "ssoAuthKeyReply": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/ssoUser",
          "description": "User."
        },
        "key": {
          "$ref": "#/definitions/ssoKey",
          "description": "User key."
        },
        "audit": {
          "type": "string",
          "description": "Audit UUID."
        }
      },
      "description": "Authentication key reply."
    },
    "ssoAuthKeyRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key value."
        },
        "audit": {
          "type": "string",
          "description": "Audit type."
        }
      },
      "description": "Authentication key request."
    },
    "ssoAuthLoginReply": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ssoAuthPasswordMeta",
          "description": "Password metadata."
        },
        "user": {
          "$ref": "#/definitions/ssoUser",
          "description": "User."
        },
        "access": {
          "$ref": "#/definitions/ssoAuthToken",
          "description": "Access token."
        },
        "refresh": {
          "$ref": "#/definitions/ssoAuthToken",
          "description": "Refresh token."
        }
      },
      "description": "Authentication login reply."
    },
    "ssoAuthLoginRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User email."
        },
        "password": {
          "type": "string",
          "description": "User password."
        }
      },
      "description": "Authentication login request."
    },
    "ssoAuthOauth2CallbackRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "Code."
        },
        "state": {
          "type": "string",
          "description": "State."
        }
      },
      "description": "Authentication OAuth2 callback request."
    },
    "ssoAuthOauth2UrlReply": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL."
        }
      },
      "description": "Authentication OAuth2 URL reply."
    },
    "ssoAuthPasswordMeta": {
      "type": "object",
      "properties": {
        "password_strength": {
          "type": "integer",
          "format": "int64",
          "description": "Password strength."
        },
        "password_pwned": {
          "type": "boolean",
          "format": "boolean",
          "description": "Password pwned."
        }
      },
      "description": "Authentication password metadata."
    },
    "ssoAuthPasswordMetaReply": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ssoAuthPasswordMeta",
          "description": "Password metadata."
        }
      },
      "description": "Authentication password metadata reply."
    },
    "ssoAuthRegisterConfirmRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Register token value."
        },
        "password": {
          "type": "string",
          "description": "User password."
        },
        "password_allow_reset": {
          "type": "boolean",
          "format": "boolean",
          "description": "User password_allow_reset flag."
        }
      },
      "description": "Authentication register confirm request."
    },
    "ssoAuthRegisterRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "User name."
        },
        "email": {
          "type": "string",
          "description": "User email."
        },
        "locale": {
          "type": "string",
          "description": "User locale."
        },
        "timezone": {
          "type": "string",
          "description": "User timezone."
        }
      },
      "description": "Authentication register request."
    },
    "ssoAuthResetPasswordConfirmRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Reset password token."
        },
        "password": {
          "type": "string",
          "description": "User password."
        }
      },
      "description": "Authentication reset password confirm request."
    },
    "ssoAuthResetPasswordRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "description": "User email."
        }
      },
      "description": "Authentication reset password request."
    },
    "ssoAuthToken": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Token value."
        },
        "token_expires": {
          "type": "string",
          "format": "int64",
          "description": "Token expires."
        }
      },
      "description": "Authentication token."
    },
    "ssoAuthTokenReply": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/ssoUser",
          "description": "User."
        },
        "access": {
          "$ref": "#/definitions/ssoAuthToken",
          "description": "Access token."
        },
        "refresh": {
          "$ref": "#/definitions/ssoAuthToken",
          "description": "Refresh token."
        },
        "audit": {
          "type": "string",
          "description": "Audit UUID."
        }
      },
      "description": "Authentication token reply."
    },
    "ssoAuthTokenRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Token value."
        },
        "audit": {
          "type": "string",
          "description": "Audit type."
        }
      },
      "title": "Authentication token request/"
    },
    "ssoAuthTokenVerifyReply": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/ssoUser",
          "description": "User."
        },
        "access": {
          "$ref": "#/definitions/ssoAuthToken",
          "description": "Access token."
        },
        "audit": {
          "type": "string",
          "description": "Audit UUID."
        }
      },
      "description": "Authentication token verify reply."
    },
    "ssoAuthTotpRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User UUID."
        },
        "totp": {
          "type": "string",
          "description": "TOTP code."
        }
      },
      "description": "Authentication TOTP request."
    },
    "ssoAuthUpdateEmailRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User UUID."
        },
        "password": {
          "type": "string",
          "description": "User current password."
        },
        "new_email": {
          "type": "string",
          "description": "User new email address."
        }
      },
      "description": "Authentication update email request."
    },
    "ssoAuthUpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "User UUID."
        },
        "password": {
          "type": "string",
          "description": "User current password."
        },
        "new_password": {
          "type": "string",
          "description": "User new password."
        }
      },
      "description": "Authentication update password request."
    },
    "ssoCsrf": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at date and time."
        },
        "key": {
          "type": "string",
          "description": "Key."
        },
        "value": {
          "type": "string",
          "description": "Value."
        },
        "ttl": {
          "type": "string",
          "format": "date-time",
          "description": "Time to live."
        },
        "service_id": {
          "type": "string",
          "description": "Service UUID."
        }
      },
      "description": "CSRF."
    },
    "ssoErrorReply": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64",
          "description": "Error code."
        },
        "error": {
          "type": "string",
          "description": "Error message."
        },
        "message": {
          "type": "string",
          "description": "Error message."
        }
      },
      "description": "Error reply."
    },
    "ssoKey": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at date and time."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at date and time."
        },
        "id": {
          "type": "string",
          "description": "UUID."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Is enabled flag."
        },
        "is_revoked": {
          "type": "boolean",
          "format": "boolean",
          "description": "Is revoked flag."
        },
        "type": {
          "$ref": "#/definitions/ssoKeyType",
          "description": "Type."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "service_id": {
          "type": "string",
          "description": "Service UUID."
        },
        "user_id": {
          "type": "string",
          "description": "User UUID."
        }
      },
      "description": "Key."
    },
    "ssoKeyCreateReply": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ssoKeyWithValue",
          "description": "Key."
        }
      },
      "description": "Create key reply."
    },
    "ssoKeyCreateRequest": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ssoKeyType",
          "description": "Key type."
        },
        "name": {
          "type": "string",
          "description": "Key name."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Key is_enabled flag."
        },
        "service_id": {
          "type": "string",
          "description": "Key service UUID."
        },
        "user_id": {
          "type": "string",
          "description": "Key user UUID."
        }
      },
      "description": "Create key request."
    },
    "ssoKeyListReply": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ssoKeyListRequest",
          "description": "Request message."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ssoKey"
          },
          "description": "Keys array."
        }
      },
      "description": "List keys reply."
    },
    "ssoKeyListRequest": {
      "type": "object",
      "properties": {
        "gt": {
          "type": "string",
          "description": "Greater than key UUID."
        },
        "lt": {
          "type": "string",
          "description": "Less than key UUID."
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Limit number of returned keys."
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Key UUID filter array."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Key is_enabled flag filter."
        },
        "is_revoked": {
          "type": "boolean",
          "format": "boolean",
          "description": "Key is_revoked flag filter."
        },
        "type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ssoKeyType"
          },
          "description": "Key type filter array."
        },
        "service_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Key service UUID filter array."
        },
        "user_id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Key user UUID filter array."
        }
      },
      "description": "List keys request."
    },
    "ssoKeyReadReply": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ssoKey",
          "description": "Key."
        }
      },
      "description": "Read key reply."
    },
    "ssoKeyType": {
      "type": "string",
      "enum": [
        "KEY",
        "TOKEN",
        "TOTP"
      ],
      "default": "KEY",
      "description": "Key type."
    },
    "ssoKeyUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Key UUID."
        },
        "name": {
          "type": "string",
          "description": "Key name."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Key is_enabled flag."
        }
      },
      "description": "Update key request."
    },
    "ssoKeyWithValue": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/ssoKey",
          "description": "Key."
        },
        "value": {
          "type": "string",
          "description": "Key value."
        }
      },
      "description": "Key with value."
    },
    "ssoService": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at date and time."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at date and time."
        },
        "id": {
          "type": "string",
          "description": "UUID."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Is enabled flag."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "url": {
          "type": "string",
          "description": "URL."
        },
        "user_allow_register": {
          "type": "boolean",
          "format": "boolean",
          "description": "User allow register flag."
        },
        "user_email_text": {
          "type": "string",
          "description": "User email text."
        },
        "provider_local_url": {
          "type": "string",
          "description": "Local provider URL."
        },
        "provider_github_oauth2_url": {
          "type": "string",
          "description": "GitHub OAuth2 provider URL."
        },
        "provider_microsoft_oauth2_url": {
          "type": "string",
          "description": "Microsoft OAuth2 provider URL."
        }
      },
      "description": "Service."
    },
    "ssoServiceCreateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Service name."
        },
        "url": {
          "type": "string",
          "description": "Service URL."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Service is_enabled flag."
        },
        "user_allow_register": {
          "type": "boolean",
          "format": "boolean",
          "description": "Service user_allow_register flag."
        },
        "user_email_text": {
          "type": "string",
          "description": "Service user email text."
        },
        "provider_local_url": {
          "type": "string",
          "description": "Service local provider URL."
        },
        "provider_github_oauth2_url": {
          "type": "string",
          "description": "Service GitHub OAuth2 provider URL."
        },
        "provider_microsoft_oauth2_url": {
          "type": "string",
          "description": "Service Microsoft OAuth2 provider URL."
        }
      },
      "description": "Create service request."
    },
    "ssoServiceListReply": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ssoServiceListRequest",
          "description": "Request message."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ssoService"
          },
          "description": "Services array."
        }
      },
      "description": "List services reply."
    },
    "ssoServiceListRequest": {
      "type": "object",
      "properties": {
        "gt": {
          "type": "string",
          "description": "Greater than service UUID."
        },
        "lt": {
          "type": "string",
          "description": "Less than service UUID."
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Limit number of returned services."
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Service UUID filter array."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Service is_enabled flag filter."
        }
      },
      "description": "List services request."
    },
    "ssoServiceReadReply": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ssoService",
          "description": "Service."
        }
      },
      "description": "Read service reply."
    },
    "ssoServiceUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Service UUID."
        },
        "name": {
          "type": "string",
          "description": "Service name."
        },
        "url": {
          "type": "string",
          "description": "Service URL."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Service is_enabled flag."
        },
        "user_allow_register": {
          "type": "boolean",
          "format": "boolean",
          "description": "Service user_allow_register flag."
        },
        "user_email_text": {
          "type": "string",
          "description": "Service user email text."
        },
        "provider_local_url": {
          "type": "string",
          "description": "Service local provider URL."
        },
        "provider_github_oauth2_url": {
          "type": "string",
          "description": "Service GitHub OAuth2 provider URL."
        },
        "provider_microsoft_oauth2_url": {
          "type": "string",
          "description": "Service Microsoft OAuth2 provider URL."
        }
      },
      "description": "Update service request."
    },
    "ssoUser": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Created at date and time."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Updated at date and time."
        },
        "id": {
          "type": "string",
          "description": "UUID."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Is enabled flag."
        },
        "name": {
          "type": "string",
          "description": "Name."
        },
        "email": {
          "type": "string",
          "description": "Email."
        },
        "locale": {
          "type": "string",
          "description": "Locale."
        },
        "timezone": {
          "type": "string",
          "description": "Timezone."
        },
        "password_allow_reset": {
          "type": "boolean",
          "format": "boolean",
          "description": "Password allow reset flag."
        },
        "password_require_update": {
          "type": "boolean",
          "format": "boolean",
          "description": "Password require update flag."
        }
      },
      "description": "User."
    },
    "ssoUserCreateReply": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ssoAuthPasswordMeta",
          "description": "Password metadata."
        },
        "data": {
          "$ref": "#/definitions/ssoUser",
          "description": "User."
        }
      },
      "description": "Create user reply."
    },
    "ssoUserCreateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "User name."
        },
        "email": {
          "type": "string",
          "description": "User email."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "User is_enabled flag."
        },
        "locale": {
          "type": "string",
          "description": "User locale."
        },
        "timezone": {
          "type": "string",
          "description": "User timezone."
        },
        "password_allow_reset": {
          "type": "boolean",
          "format": "boolean",
          "description": "User password_allow_reset flag."
        },
        "password_require_update": {
          "type": "boolean",
          "format": "boolean",
          "description": "User password_require_update flag."
        },
        "password": {
          "type": "string",
          "description": "User password."
        }
      },
      "description": "Create user request."
    },
    "ssoUserListReply": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ssoUserListRequest",
          "description": "Request message."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ssoUser"
          },
          "description": "Users array."
        }
      },
      "description": "List users reply."
    },
    "ssoUserListRequest": {
      "type": "object",
      "properties": {
        "gt": {
          "type": "string",
          "description": "Greater than service UUID."
        },
        "lt": {
          "type": "string",
          "description": "Less than service UUID."
        },
        "name_ge": {
          "type": "string",
          "description": "Greater than or equal user name."
        },
        "name_le": {
          "type": "string",
          "description": "Less than or equal user name."
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Limit number of returned users."
        },
        "offset_id": {
          "type": "string",
          "description": "Offset user UUID for paging."
        },
        "id": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "User UUID filter array."
        },
        "email": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "User email filter array."
        }
      },
      "description": "List users request."
    },
    "ssoUserReadReply": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ssoUser",
          "description": "User."
        }
      },
      "description": "Read user reply."
    },
    "ssoUserUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User UUID."
        },
        "name": {
          "type": "string",
          "description": "User name."
        },
        "is_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "User is_enabled flag."
        },
        "locale": {
          "type": "string",
          "description": "User locale."
        },
        "timezone": {
          "type": "string",
          "description": "User timezone."
        },
        "password_allow_reset": {
          "type": "boolean",
          "format": "boolean",
          "description": "User password_allow_reset flag."
        },
        "password_require_update": {
          "type": "boolean",
          "format": "boolean",
          "description": "User password_require_update flag."
        }
      },
      "description": "Update user request."
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}
