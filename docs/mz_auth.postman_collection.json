{
	"info": {
		"_postman_id": "8adebe21-5051-406a-8ce6-4d88ed05e85b",
		"name": "mz_auth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Provider",
					"item": [
						{
							"name": "Local",
							"item": [
								{
									"name": "Login",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"guestguest\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/login",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"login"
											]
										},
										"description": "Login with email address and password.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- User email address is invalid or unknown.\n- User password is invalid or incorrect or null.\n- User is not assigned key for service.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Reset Password",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"user@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/reset-password",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"reset-password"
											]
										},
										"description": "Reset password request for email address.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- User email address is invalid or unknown.\n- User is not assigned key for service.\n- User password is null.\n- Unable to send password reset email.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Reset Password Confirm",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"token\": \"{{reset_password_token}}\",\n  \"password\": \"guest\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/reset-password/confirm",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"reset-password",
												"confirm"
											]
										},
										"description": "Confirm reset password request.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Token is invalid or has been used.\n- User password is invalid.\n- User is not assigned key for service.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Update Email",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"{{user_key}}\",\n  \"token\": \"{{user_access_token}}\",\n  \"password\": \"guest\",\n  \"new_email\": \"new-email@test.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/update-email",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"update-email"
											]
										},
										"description": "Update email request for user.\n\n**400, Bad Request**\n\n- Request body is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Update Email Revoke",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"token\": \"{{update_email_revoke_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/update-email/revoke",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"update-email",
												"revoke"
											]
										},
										"description": "Revoke update email request for user.\n\n**400, Bad Request**\n\n- Request body is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Update Password",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"{{user_key}}\",\n  \"token\": \"{{user_access_token}}\",\n  \"password\": \"guest\",\n  \"new_password\": \"newpassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/update-password",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"update-password"
											]
										},
										"description": "Update password request for user.\n\n**400, Bad Request**\n\n- Request body is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Update Password Revoke",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"token\": \"{{update_password_revoke_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/update-password/revoke",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"update-password",
												"revoke"
											]
										},
										"description": "Revoke update password request for user.\n\n**400, Bad Request**\n\n- Request body is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GitHub",
							"item": [
								{
									"name": "OAuth2 Request",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/github/oauth2",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"github",
												"oauth2"
											]
										},
										"description": "Request an OAuth2 authentication redirect URL.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "OAuth2 Callback",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/microsoft/oauth2?code=aaa&state=bbb",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"microsoft",
												"oauth2"
											],
											"query": [
												{
													"key": "code",
													"value": "aaa"
												},
												{
													"key": "state",
													"value": "bbb"
												}
											]
										},
										"description": "User redirected here by GitHub OAuth2 server after successful authentication."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Microsoft",
							"item": [
								{
									"name": "OAuth2 Request",
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/microsoft/oauth2",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"microsoft",
												"oauth2"
											]
										},
										"description": "Request an OAuth2 authentication redirect URL.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "OAuth2 Callback",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/microsoft/oauth2?code=aaa&state=bbb",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"microsoft",
												"oauth2"
											],
											"query": [
												{
													"key": "code",
													"value": "aaa"
												},
												{
													"key": "state",
													"value": "bbb"
												}
											]
										},
										"description": "User redirected here by Microsoft OAuth2 server after successful authentication."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Key",
					"item": [
						{
							"name": "Verify Key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key\": \"{{user_key}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/key/verify",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"key",
										"verify"
									]
								},
								"description": "Verify user key.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Key is invalid.\n- Key is for a service.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
							},
							"response": []
						},
						{
							"name": "Revoke Key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key\": \"{{user_key}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/key/revoke",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"key",
										"revoke"
									]
								},
								"description": "Revoke a user key, any associated tokens will become invalid.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Key is invalid.\n- Key is for a service.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Token",
					"item": [
						{
							"name": "Verify Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"token\": \"{{user_access_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/token/verify",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"token",
										"verify"
									]
								},
								"description": "Verify user token.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Token is invalid.\n- Token is not for authorised service.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
							},
							"response": []
						},
						{
							"name": "Refresh Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"token\": \"{{user_refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/token/refresh",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"token",
										"refresh"
									]
								},
								"description": "Refresh user token, creates new token with updated expiry time.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Token is invalid.\n- Token is not for authorised service.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
							},
							"response": []
						},
						{
							"name": "Revoke Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"token\": \"{{user_access_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/token/revoke",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"token",
										"revoke"
									]
								},
								"description": "Revoke user token, revokes associated key to prevent reuse.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Token is invalid.\n- Token is not for authorised service.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "TOTP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"key_id\": \"{{user_key}}\",\n\t\"totp\": \"{{totp_code}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/auth/totp",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"auth",
								"totp"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Audit",
			"item": [
				{
					"name": "List Audit Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/audit",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"audit"
							],
							"query": [
								{
									"key": "ge",
									"value": "",
									"description": "Greater than or equal created time (optional).",
									"disabled": true
								},
								{
									"key": "le",
									"value": "",
									"description": "Less than or equal created time (optional).",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Limit number of returned audit logs (optional).",
									"disabled": true
								},
								{
									"key": "offset_id",
									"value": "",
									"description": "Offset audit log ID for paging (optional).",
									"disabled": true
								},
								{
									"key": "type[0]",
									"value": "",
									"description": "Audit log type filter array (optional).",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Audit Log",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"Example\",\n\t\"data\": {\n\t\t\"message\": \"Some message string.\"\n\t},\n\t\"user_id\": \"{{user_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/audit",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"audit"
							]
						},
						"description": "**400, Bad Request**\n\n- Request body is invalid.\n- Audit log type is invalid.\n- Audit log data is invalid.\n- User ID is invalid or user does not exist.\n- User key ID is invalid or user key does not exist.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Read Audit Log",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/audit/{{audit_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"audit",
								"{{audit_id}}"
							]
						},
						"description": "**403, Forbidden**\n\n- Authorisation header is invalid.\n\n**404, Not Found**\n\n- Audit log ID not found."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Key",
			"item": [
				{
					"name": "List Keys",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/key?",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key"
							],
							"query": [
								{
									"key": "gt",
									"value": "{{key_id}}",
									"description": "Greater than ID (optional).",
									"disabled": true
								},
								{
									"key": "lt",
									"value": "{{key_id}}",
									"description": "Less than ID (optional).",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Limit number of returned keys (optional).",
									"disabled": true
								}
							]
						},
						"description": "**400, Bad Request**\n\n- Request query is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Create Key",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": true,\n\t\"name\": \"Key Name\",\n\t\"service_id\": \"{{service_id}}\",\n\t\"user_id\": \"{{user_id}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/key",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key"
							]
						},
						"description": "Service keys can only be created with root key authorisation, else user is created for service.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Key name is invalid.\n- Service ID is invalid or service does not exist.\n- User ID is invalid or user does not exist.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Read Key",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/key/{{key_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key",
								"{{key_id}}"
							]
						},
						"description": "**403, Forbidden**\n\n- Authorisation header is invalid.\n\n**404, Not Found**\n\n- Key ID not found."
					},
					"response": []
				},
				{
					"name": "Update Key",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": true,\n\t\"name\": \"New Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/key/{{key_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key",
								"{{key_id}}"
							]
						},
						"description": "**400, Bad Request**\n\n- Request body is invalid.\n- Key name is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Delete Key",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/key/{{key_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key",
								"{{key_id}}"
							]
						},
						"description": "**400, Bad Request**\n\n- Key ID is invalid or key does not exist.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Service",
			"item": [
				{
					"name": "List Services",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/service?",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service"
							],
							"query": [
								{
									"key": "gt",
									"value": "{{service_id}}",
									"description": "Greater than ID (optional).",
									"disabled": true
								},
								{
									"key": "lt",
									"value": "{{service_id}}",
									"description": "Less than ID (optional).",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Limit number of returned services (optional).",
									"disabled": true
								}
							]
						},
						"description": "**400, Bad Request**\n\n- Request query is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Create Service",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": true,\n\t\"name\": \"Service Name\",\n\t\"url\": \"http://localhost:9001\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/service",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service"
							]
						},
						"description": "**400, Bad Request**\n\n- Request body is invalid.\n- Service name is invalid.\n- Service URL is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Read Service",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/service/{{service_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service",
								"{{service_id}}"
							]
						},
						"description": "**403, Forbidden**\n\n- Authorisation header is invalid.\n\n**404, Not Found**\n\n- Service ID not found."
					},
					"response": []
				},
				{
					"name": "Update Service",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": true,\n\t\"name\": \"New Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/service/{{service_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service",
								"{{service_id}}"
							]
						},
						"description": "**400, Bad Request**\n\n- Request body is invalid.\n- Service name is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Delete Service",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/service/{{service_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service",
								"{{service_id}}"
							]
						},
						"description": "**400, Bad Request**\n\n- Service ID is invalid or service does not exist.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "List Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/user?",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user"
							],
							"query": [
								{
									"key": "gt",
									"value": "{{user_id}}",
									"description": "Greater than ID (optional).",
									"disabled": true
								},
								{
									"key": "lt",
									"value": "{{user_id}}",
									"description": "Less than ID (optional).",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Limit number of returned users (optional).",
									"disabled": true
								},
								{
									"key": "email_eq",
									"value": "{{user_email}}",
									"description": "Filter users by email address (optional).",
									"disabled": true
								}
							]
						},
						"description": "**400, Bad Request**\n\n- Request query is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"is_enabled\": true,\n  \"name\": \"User Name\",\n  \"email\": \"user@example.com\",\n  \"password\": \"guestguest\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/user",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user"
							]
						},
						"description": "Users can be created without a password.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- User name is invalid.\n- User email address is invalid or not unique.\n- User password is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Read User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/user/{{user_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user",
								"{{user_id}}"
							]
						},
						"description": "**403, Forbidden**\n\n- Authorisation header is invalid.\n\n**404, Not Found**\n\n- User ID not found."
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": true,\n\t\"name\": \"New Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/user/{{user_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user",
								"{{user_id}}"
							]
						},
						"description": "**400, Bad Request**\n\n- Request body is invalid.\n- User name is invalid.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/user/{{user_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user",
								"{{user_id}}"
							]
						},
						"description": "**400, Bad Request**\n\n- User ID is invalid or user does not exist.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Ping",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/v1/ping",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"v1",
						"ping"
					]
				}
			},
			"response": [
				{
					"name": "Ping",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/ping",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"ping"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "content-length",
							"value": "6"
						},
						{
							"key": "content-type",
							"value": "application/json"
						},
						{
							"key": "date",
							"value": "Sat, 28 Sep 2019 18:26:47 GMT"
						}
					],
					"cookie": [],
					"body": "\"pong\""
				}
			]
		},
		{
			"name": "Metrics",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/v1/metrics",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"v1",
						"metrics"
					]
				},
				"description": "Server metrics in prometheus exposition format.\n\n**403, Forbidden**\n\n- Authorisation header is invalid."
			},
			"response": [
				{
					"name": "Metrics",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/metrics",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"metrics"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "content-length",
							"value": "1745"
						},
						{
							"key": "date",
							"value": "Sat, 28 Sep 2019 18:28:57 GMT"
						}
					],
					"cookie": [],
					"body": "# HELP process_cpu_usage CPU usage (%).\n# TYPE process_cpu_usage counter\nprocess_cpu_usage 0\n# HELP process_resident_memory_bytes Resident memory size in bytes.\n# TYPE process_resident_memory_bytes counter\nprocess_resident_memory_bytes 23310336\n\n# HELP mz_auth_http_count HTTP request counter\n# TYPE mz_auth_http_count counter\nmz_auth_http_count{path=\"/\",status=\"200\"} 5\nmz_auth_http_count{path=\"/\",status=\"403\"} 1\n# HELP mz_auth_http_latency HTTP request latency\n# TYPE mz_auth_http_latency histogram\nmz_auth_http_latency_bucket{path=\"/\",le=\"0.005\"} 4\nmz_auth_http_latency_bucket{path=\"/\",le=\"0.01\"} 5\nmz_auth_http_latency_bucket{path=\"/\",le=\"0.025\"} 6\nmz_auth_http_latency_bucket{path=\"/\",le=\"0.05\"} 6\nmz_auth_http_latency_bucket{path=\"/\",le=\"0.1\"} 6\nmz_auth_http_latency_bucket{path=\"/\",le=\"0.25\"} 6\nmz_auth_http_latency_bucket{path=\"/\",le=\"0.5\"} 6\nmz_auth_http_latency_bucket{path=\"/\",le=\"1\"} 6\nmz_auth_http_latency_bucket{path=\"/\",le=\"2.5\"} 6\nmz_auth_http_latency_bucket{path=\"/\",le=\"5\"} 6\nmz_auth_http_latency_bucket{path=\"/\",le=\"10\"} 6\nmz_auth_http_latency_bucket{path=\"/\",le=\"+Inf\"} 6\nmz_auth_http_latency_sum{path=\"/\"} 0.031017071000000004\nmz_auth_http_latency_count{path=\"/\"} 6\n\n# HELP mz_auth_audit Audit log counter\n# TYPE mz_auth_audit counter\nmz_auth_audit{path=\"AuthenticateError\"} 16\nmz_auth_audit{path=\"KeyRevoke\"} 2\nmz_auth_audit{path=\"KeyRevokeError\"} 3\nmz_auth_audit{path=\"KeyVerifyError\"} 5\nmz_auth_audit{path=\"Login\"} 9\nmz_auth_audit{path=\"LoginError\"} 4\nmz_auth_audit{path=\"ResetPassword\"} 2\nmz_auth_audit{path=\"ResetPasswordError\"} 2\nmz_auth_audit{path=\"TokenRefresh\"} 3\nmz_auth_audit{path=\"TokenRefreshError\"} 1\nmz_auth_audit{path=\"TokenRevoke\"} 2\nmz_auth_audit{path=\"TokenVerifyError\"} 2\nmz_auth_audit{path=\"test_1\"} 9\n"
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5e94c294-1684-48b8-a1a7-edf77a00cebd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0eeafc26-6a82-40ea-bf61-ea1d0e2a95a9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "04ca3064-d74e-4ddc-8088-6dacec6b3cbb",
			"key": "server_url",
			"value": "localhost:9000",
			"type": "string"
		},
		{
			"id": "bce11c41-2c05-451e-aaed-5c9fd29cdaf6",
			"key": "key",
			"value": "{{root_key}}",
			"type": "string"
		},
		{
			"id": "435e2649-e5aa-42c1-8681-207d40d38dbc",
			"key": "root_key",
			"value": "6578ab1726ffd588c3332661a4a1978e696b4e8dc9",
			"type": "string"
		},
		{
			"id": "07239bc2-cb32-48ce-9160-0d143f13e98b",
			"key": "service_key",
			"value": "255f70162ce8651841b72ea2113e49137a3831975b",
			"type": "string"
		},
		{
			"id": "f57e0ee5-c8c3-4523-80b1-7e7f44d2edfc",
			"key": "service_id",
			"value": "360914c0-2e2f-43b2-aa06-4678c9039c3d",
			"type": "string"
		},
		{
			"id": "ca3a8642-1e62-4e67-a12b-e59cf06beef5",
			"key": "key_id",
			"value": "f8a6be4b-1477-4620-bec2-caa5b6a4bfd6",
			"type": "string"
		},
		{
			"id": "f32d998e-e9d1-4d0b-a537-68c834a2f352",
			"key": "user_id",
			"value": "d6cd0520-885a-45b9-9a77-31ee9a22cbfe",
			"type": "string"
		},
		{
			"id": "711e205a-175a-4bbb-b719-89e7b20add39",
			"key": "user_email",
			"value": "e8786842e35342cb95aa76b31d952cf9@test.com",
			"type": "string"
		},
		{
			"id": "c0ff5ee6-9097-4b37-a544-10c06795d2ff",
			"key": "audit_id",
			"value": "961359b5-4d89-49e6-a3d2-714a73857eeb",
			"type": "string"
		},
		{
			"id": "0cc80ab9-66a1-4e6a-95ee-8aae8ba9e8b3",
			"key": "user_access_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiIzNjA5MTRjMC0yZTJmLTQzYjItYWEwNi00Njc4YzkwMzljM2QiLCJzdWIiOiJkNmNkMDUyMC04ODVhLTQ1YjktOWE3Ny0zMWVlOWEyMmNiZmUiLCJleHAiOjE1Njk3MDU2NDgsInhfdHlwZSI6MCwieF9jc3JmIjpudWxsfQ.Xp_uYl6f6yxsYgu8RwWGS6vEi9j5sX_kIsrykBmshC0",
			"type": "string"
		},
		{
			"id": "cc9cf275-f568-4fab-82f9-b04cdf5f38d2",
			"key": "user_refresh_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiIzNjA5MTRjMC0yZTJmLTQzYjItYWEwNi00Njc4YzkwMzljM2QiLCJzdWIiOiJkNmNkMDUyMC04ODVhLTQ1YjktOWE3Ny0zMWVlOWEyMmNiZmUiLCJleHAiOjE1Njk3ODg0NDgsInhfdHlwZSI6MSwieF9jc3JmIjoiYzY5YzE5OGZmYTBhMGNhODg5MTM4YjBhMzNhNjQ5MDMyYzZjMjM0ZjA3In0.a0-t0KgIPnP1EkZwQb2P_LXiEKQpSE3RDIy-aax2tYI",
			"type": "string"
		},
		{
			"id": "e79bbdfa-0510-4a83-908a-07e9996288cc",
			"key": "user_key",
			"value": "1b4b29ab8f1fd3833583de094e104a4726e0a20f28",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}