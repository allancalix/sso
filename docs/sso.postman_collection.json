{
	"info": {
		"_postman_id": "4876250c-5199-4ae1-814a-de333fefc35f",
		"name": "sso",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Provider",
					"item": [
						{
							"name": "Local",
							"item": [
								{
									"name": "Login",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"guestguest\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/login",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"login"
											]
										},
										"description": "Login with email address and password.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- User email address is invalid or unknown.\n- User password is invalid or incorrect or null.\n- User is not assigned key for service.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Register",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"description": "Audited header.",
												"key": "Forwarded",
												"type": "text",
												"value": "by=id;"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"username\",\n    \"email\": \"{{user_email}}\",\n    \"locale\": \"en_GB\",\n    \"timezone\": \"Europe/London\",\n    \"password_allow_reset\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/register",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"register"
											]
										},
										"description": "Reset password request for email address.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- User email address is invalid or unknown.\n- User is not assigned key for service.\n- User password is null.\n- Unable to send password reset email.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Register Confirm",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"description": "Audited header.",
												"key": "Forwarded",
												"type": "text",
												"value": "by=id;"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"token\": \"{{register_token}}\",\n    \"password\": \"guestguest\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/register/confirm",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"register",
												"confirm"
											]
										},
										"description": "Reset password request for email address.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- User email address is invalid or unknown.\n- User is not assigned key for service.\n- User password is null.\n- Unable to send password reset email.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Reset Password",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Forwarded",
												"value": "by=id;",
												"description": "Audited header.",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{user_email}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/reset-password",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"reset-password"
											]
										},
										"description": "Reset password request for email address.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- User email address is invalid or unknown.\n- User is not assigned key for service.\n- User password is null.\n- Unable to send password reset email.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Reset Password Confirm",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"token\": \"{{user_reset_password_token}}\",\n  \"password\": \"mynewpassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/reset-password/confirm",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"reset-password",
												"confirm"
											]
										},
										"description": "Confirm reset password request.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Token is invalid or has been used.\n- User password is invalid.\n- User is not assigned key for service.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Update Email",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"{{user_key}}\",\n  \"token\": \"{{user_access_token}}\",\n  \"password\": \"guestguest\",\n  \"new_email\": \"{{user_email}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/update-email",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"update-email"
											]
										},
										"description": "Update email request for user.\n\n`key` or `token` must be provided for authentication.\n\n**400, Bad Request**\n\n- Request body is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Update Email Revoke",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"token\": \"{{user_update_email_revoke_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/update-email/revoke",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"update-email",
												"revoke"
											]
										},
										"description": "Revoke update email request for user.\n\n**400, Bad Request**\n\n- Request body is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Update Password",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"key\": \"{{user_key}}\",\n  \"token\": \"{{user_access_token}}\",\n  \"password\": \"guestguest\",\n  \"new_password\": \"mynewpassword\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/update-password",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"update-password"
											]
										},
										"description": "Update password request for user.\n\n`key` or `token` must be provided for authentication.\n\n**400, Bad Request**\n\n- Request body is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "Update Password Revoke",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"token\": \"{{user_update_password_revoke_token}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/local/update-password/revoke",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"local",
												"update-password",
												"revoke"
											]
										},
										"description": "Revoke update password request for user.\n\n**400, Bad Request**\n\n- Request body is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GitHub",
							"item": [
								{
									"name": "OAuth2 Request",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/github/oauth2",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"github",
												"oauth2"
											]
										},
										"description": "Request an OAuth2 authentication redirect URL.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "OAuth2 Callback",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{github_oauth2_code}}\",\n    \"state\": \"{{github_oauth2_state}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/github/oauth2",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"github",
												"oauth2"
											]
										},
										"description": "User redirected here by GitHub OAuth2 server after successful authentication."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Microsoft",
							"item": [
								{
									"name": "OAuth2 Request",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/microsoft/oauth2",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"microsoft",
												"oauth2"
											]
										},
										"description": "Request an OAuth2 authentication redirect URL.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
									},
									"response": []
								},
								{
									"name": "OAuth2 Callback",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{microsoft_oauth2_code}}\",\n    \"state\": \"{{microsoft_oauth2_state}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{server_url}}/v1/auth/provider/microsoft/oauth2",
											"host": [
												"{{server_url}}"
											],
											"path": [
												"v1",
												"auth",
												"provider",
												"microsoft",
												"oauth2"
											]
										},
										"description": "User redirected here by Microsoft OAuth2 server after successful authentication."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Key",
					"item": [
						{
							"name": "Verify Key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key\": \"{{user_key}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/key/verify",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"key",
										"verify"
									]
								},
								"description": "Verify user key.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Key is invalid.\n- Key is for a service.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
							},
							"response": []
						},
						{
							"name": "Revoke Key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"key\": \"{{user_key}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/key/revoke",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"key",
										"revoke"
									]
								},
								"description": "Revoke a user key, any associated tokens will become invalid.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Key is invalid.\n- Key is for a service.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Token",
					"item": [
						{
							"name": "Verify Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"token\": \"{{user_access_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/token/verify",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"token",
										"verify"
									]
								},
								"description": "Verify user token.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Token is invalid.\n- Token is not for authorised service.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
							},
							"response": []
						},
						{
							"name": "Refresh Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"token\": \"{{user_refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/token/refresh",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"token",
										"refresh"
									]
								},
								"description": "Refresh user token, creates new token with updated expiry time.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Token is invalid.\n- Token is not for authorised service.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
							},
							"response": []
						},
						{
							"name": "Revoke Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"token\": \"{{user_refresh_token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{server_url}}/v1/auth/token/revoke",
									"host": [
										"{{server_url}}"
									],
									"path": [
										"v1",
										"auth",
										"token",
										"revoke"
									]
								},
								"description": "Revoke user token, revokes associated key to prevent reuse.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Token is invalid.\n- Token is not for authorised service.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify TOTP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": \"{{user_id}}\",\n    \"totp\": \"{{totp_code}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/auth/totp",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"auth",
								"totp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create CSRF",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/auth/csrf?expires_s=1000",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"auth",
								"csrf"
							],
							"query": [
								{
									"key": "expires_s",
									"value": "1000",
									"description": "Expiry time in seconds (required)."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify CSRF",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"key\": \"{{csrf_key}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/auth/csrf",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"auth",
								"csrf"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Audit",
			"item": [
				{
					"name": "List Audit Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/audit?",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"audit"
							],
							"query": [
								{
									"key": "ge",
									"value": "",
									"description": "Greater than or equal created time (optional).",
									"disabled": true
								},
								{
									"key": "le",
									"value": "",
									"description": "Less than or equal created time (optional).",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Limit number of returned audit logs (optional).",
									"disabled": true
								},
								{
									"key": "offset_id",
									"value": "",
									"description": "Offset audit log ID for paging (optional).",
									"disabled": true
								},
								{
									"key": "type[0]",
									"value": "",
									"description": "Audit log type filter array (optional).",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Audit Log",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"Example\",\n\t\"subject\": \"some-id\",\n\t\"data\": {\n\t\t\"message\": \"Some message string.\"\n\t},\n\t\"user_id\": \"{{user_id}}\",\n\t\"user_key_id\": \"{{user_key_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/audit",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"audit"
							]
						},
						"description": "**400, Bad Request**\n\n- Request body is invalid.\n- Audit log type is invalid.\n- Audit log data is invalid.\n- User ID is invalid or user does not exist.\n- User key ID is invalid or user key does not exist.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Read Audit Log",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/audit/{{audit_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"audit",
								"{{audit_id}}"
							]
						},
						"description": "**401, Unauthorised**\n\n- Authorisation header is invalid.\n\n**404, Not Found**\n\n- Audit log ID not found."
					},
					"response": []
				},
				{
					"name": "Update Audit Log",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\": {\n\t\t\"key\": \"value\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/audit/{{audit_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"audit",
								"{{audit_id}}"
							]
						},
						"description": "Append data to existing audit log data.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid.\n\n**404, Not Found**\n\n- Audit log ID not found."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Key",
			"item": [
				{
					"name": "List Keys",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/key?",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key"
							],
							"query": [
								{
									"key": "gt",
									"value": "{{key_id}}",
									"description": "Greater than ID (optional).",
									"disabled": true
								},
								{
									"key": "lt",
									"value": "{{key_id}}",
									"description": "Less than ID (optional).",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Limit number of returned keys (optional).",
									"disabled": true
								},
								{
									"key": "id[0]",
									"value": "{{key_id}}",
									"description": "ID filter (optional).",
									"disabled": true
								},
								{
									"key": "is_enabled",
									"value": "false",
									"description": "Is enabled filter (optional).",
									"disabled": true
								},
								{
									"key": "is_revoked",
									"value": "true",
									"description": "Is revoked filter (optional).",
									"disabled": true
								},
								{
									"key": "type[0]",
									"value": "Key",
									"description": "Type filter (optional).",
									"disabled": true
								},
								{
									"key": "service_id[0]",
									"value": "{{service_id}}",
									"description": "Service ID filter (optional).",
									"disabled": true
								},
								{
									"key": "user_id[0]",
									"value": "{{user_id}}",
									"description": "User ID filter (optional).",
									"disabled": true
								}
							]
						},
						"description": "**400, Bad Request**\n\n- Request query is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Create Key",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": true,\n\t\"type\": \"Key\",\n\t\"name\": \"Service Key 2\",\n\t\"service_id\": \"{{service_id}}\",\n\t\"user_id\": \"{{user_id}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/key",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key"
							]
						},
						"description": "Service keys can only be created with root key authorisation, else user key is created for service making request.\n\nUnless creating a service key, `service_id` field must be removed.\n\nKey types are: `Key`, `Token`, `Totp`.\n\nRoot and service keys must be `Key` type.\n\nUsers may only have one enabled and not revoked key where type is `Token`.\n\nUsers may only have one enabled and not revoked key where type is `Totp`.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Key name is invalid.\n- Service ID is invalid or service does not exist.\n- User ID is invalid or user does not exist.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Read Key",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/key/{{key_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key",
								"{{key_id}}"
							]
						},
						"description": "**401, Unauthorised**\n\n- Authorisation header is invalid.\n\n**404, Not Found**\n\n- Key ID not found."
					},
					"response": []
				},
				{
					"name": "Update Key",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": true,\n\t\"name\": \"Service Key 01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/key/{{key_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key",
								"{{key_id}}"
							]
						},
						"description": "All fields are optional.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Key name is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Delete Key",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/key/{{key_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"key",
								"{{key_id}}"
							]
						},
						"description": "**400, Bad Request**\n\n- Key ID is invalid or key does not exist.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Service",
			"item": [
				{
					"name": "List Services",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/service?",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service"
							],
							"query": [
								{
									"key": "gt",
									"value": "{{service_id}}",
									"description": "Greater than ID (optional).",
									"disabled": true
								},
								{
									"key": "lt",
									"value": "{{service_id}}",
									"description": "Less than ID (optional).",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Limit number of returned services (optional).",
									"disabled": true
								},
								{
									"key": "id[0]",
									"value": "{{service_id}}",
									"description": "ID filter array (optional).",
									"disabled": true
								},
								{
									"key": "is_enabled",
									"value": "true",
									"description": "Is enabled filter (optional).",
									"disabled": true
								}
							]
						},
						"description": "**400, Bad Request**\n\n- Request query is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Create Service",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": true,\n\t\"name\": \"Service 1\",\n\t\"url\": \"http://localhost:9001\",\n\t\"provider_local_url\": \"http://localhost:9001/sso/local\",\n\t\"provider_github_oauth2_url\": \"http://localhost:9001/sso/github/oauth2\",\n\t\"provider_microsoft_oauth2_url\": \"http://localhost:9001/sso/microsoft/oauth2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/service",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service"
							]
						},
						"description": "**400, Bad Request**\n\n- Request body is invalid.\n- Service name is invalid.\n- Service URL is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Read Service",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/service/{{service_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service",
								"{{service_id}}"
							]
						},
						"description": "**401, Unauthorised**\n\n- Authorisation header is invalid.\n\n**404, Not Found**\n\n- Service ID not found."
					},
					"response": []
				},
				{
					"name": "Update Service",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": true,\n\t\"name\": \"Named Service\",\n\t\"url\": \"http://localhost:9002\",\n\t\"provider_local_url\": \"http://localhost:9002/sso/local\",\n\t\"provider_github_oauth2_url\": \"http://localhost:9002/sso/github/oauth2\",\n\t\"provider_microsoft_oauth2_url\": \"http://localhost:9002/sso/microsoft/oauth2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/service/{{service_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service",
								"{{service_id}}"
							]
						},
						"description": "All fields are optional.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- Service name is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Delete Service",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/service/{{service_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"service",
								"{{service_id}}"
							]
						},
						"description": "**400, Bad Request**\n\n- Service ID is invalid or service does not exist.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "User",
			"item": [
				{
					"name": "List Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/user?",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user"
							],
							"query": [
								{
									"key": "gt",
									"value": "{{user_id}}",
									"description": "Greater than ID (optional).",
									"disabled": true
								},
								{
									"key": "lt",
									"value": "{{user_id}}",
									"description": "Less than ID (optional).",
									"disabled": true
								},
								{
									"key": "name_ge",
									"value": "_",
									"description": "Name greater than or equal (optional).",
									"disabled": true
								},
								{
									"key": "name_le",
									"value": "",
									"description": "Name less than or equal (optional).",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Limit number of returned users (optional).",
									"disabled": true
								},
								{
									"key": "offset_id",
									"value": "",
									"description": "Offset user ID for paging (optional).",
									"disabled": true
								},
								{
									"key": "id[0]",
									"value": "{{user_id}}",
									"description": "ID filter (optional).",
									"disabled": true
								},
								{
									"key": "email[0]",
									"value": "{{user_email}}",
									"description": "Email filter (optional).",
									"disabled": true
								}
							]
						},
						"description": "**400, Bad Request**\n\n- Request query is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "User-Authorization",
								"value": "key {{user_key}}",
								"description": "Authenticate user key or token (optional).",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"is_enabled\": true,\n  \"name\": \"UserName\",\n  \"email\": \"{{user_email}}\",\n  \"locale\": \"en\",\n  \"timezone\": \"Etc/UTC\",\n  \"password_allow_reset\": false,\n  \"password_require_update\": false,\n  \"password\": \"guestguest\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/user",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user"
							]
						},
						"description": "Users can be created without a password by excluding password related fields.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- User name is invalid.\n- User email address is invalid or not unique.\n- User password is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Read User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/user/{{user_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user",
								"{{user_id}}"
							]
						},
						"description": "**401, Unauthorised**\n\n- Authorisation header is invalid.\n\n**404, Not Found**\n\n- User ID not found."
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"is_enabled\": false,\n\t\"name\": \"UserName\",\n\t\"locale\": \"en_GB\",\n\t\"timezone\": \"Europe/London\",\n\t\"password_allow_reset\": true,\n\t\"password_require_update\": true\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/v1/user/{{user_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user",
								"{{user_id}}"
							]
						},
						"description": "All fields are optional.\n\n**400, Bad Request**\n\n- Request body is invalid.\n- User name is invalid.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/user/{{user_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"user",
								"{{user_id}}"
							]
						},
						"description": "**400, Bad Request**\n\n- User ID is invalid or user does not exist.\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Ping",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/v1/ping",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"v1",
						"ping"
					]
				},
				"description": "Uptime test route, authentication is not required for this route."
			},
			"response": [
				{
					"name": "Ping",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/ping",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"ping"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "content-length",
							"value": "6"
						},
						{
							"key": "content-type",
							"value": "application/json"
						},
						{
							"key": "date",
							"value": "Sat, 28 Sep 2019 18:26:47 GMT"
						}
					],
					"cookie": [],
					"body": "\"pong\""
				}
			]
		},
		{
			"name": "Metrics",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server_url}}/v1/metrics",
					"host": [
						"{{server_url}}"
					],
					"path": [
						"v1",
						"metrics"
					]
				},
				"description": "Server metrics in [Prometheus exposition format]((https://prometheus.io/docs/instrumenting/exposition_formats/)).\n\n**401, Unauthorised**\n\n- Authorisation header is invalid."
			},
			"response": [
				{
					"name": "Metrics",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/v1/metrics",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"v1",
								"metrics"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "content-length",
							"value": "1745"
						},
						{
							"key": "date",
							"value": "Sat, 28 Sep 2019 18:28:57 GMT"
						}
					],
					"cookie": [],
					"body": "# HELP process_cpu_usage CPU usage (%).\n# TYPE process_cpu_usage counter\nprocess_cpu_usage 0\n# HELP process_resident_memory_bytes Resident memory size in bytes.\n# TYPE process_resident_memory_bytes counter\nprocess_resident_memory_bytes 23310336\n\n# HELP sso_http_count HTTP request counter\n# TYPE sso_http_count counter\nsso_http_count{path=\"/\",status=\"200\"} 5\nsso_http_count{path=\"/\",status=\"403\"} 1\n# HELP sso_http_latency HTTP request latency\n# TYPE sso_http_latency histogram\nsso_http_latency_bucket{path=\"/\",le=\"0.005\"} 4\nsso_http_latency_bucket{path=\"/\",le=\"0.01\"} 5\nsso_http_latency_bucket{path=\"/\",le=\"0.025\"} 6\nsso_http_latency_bucket{path=\"/\",le=\"0.05\"} 6\nsso_http_latency_bucket{path=\"/\",le=\"0.1\"} 6\nsso_http_latency_bucket{path=\"/\",le=\"0.25\"} 6\nsso_http_latency_bucket{path=\"/\",le=\"0.5\"} 6\nsso_http_latency_bucket{path=\"/\",le=\"1\"} 6\nsso_http_latency_bucket{path=\"/\",le=\"2.5\"} 6\nsso_http_latency_bucket{path=\"/\",le=\"5\"} 6\nsso_http_latency_bucket{path=\"/\",le=\"10\"} 6\nsso_http_latency_bucket{path=\"/\",le=\"+Inf\"} 6\nsso_http_latency_sum{path=\"/\"} 0.031017071000000004\nsso_http_latency_count{path=\"/\"} 6\n\n# HELP sso_audit Audit log counter\n# TYPE sso_audit counter\nsso_audit{path=\"AuthenticateError\"} 16\nsso_audit{path=\"KeyRevoke\"} 2\nsso_audit{path=\"KeyRevokeError\"} 3\nsso_audit{path=\"KeyVerifyError\"} 5\nsso_audit{path=\"Login\"} 9\nsso_audit{path=\"LoginError\"} 4\nsso_audit{path=\"ResetPassword\"} 2\nsso_audit{path=\"ResetPasswordError\"} 2\nsso_audit{path=\"TokenRefresh\"} 3\nsso_audit{path=\"TokenRefreshError\"} 1\nsso_audit{path=\"TokenRevoke\"} 2\nsso_audit{path=\"TokenVerifyError\"} 2\nsso_audit{path=\"test_1\"} 9\n"
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5e94c294-1684-48b8-a1a7-edf77a00cebd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0eeafc26-6a82-40ea-bf61-ea1d0e2a95a9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8e484413-ffd7-49ba-98d8-2a51765161f7",
			"key": "server_url",
			"value": "localhost:9000",
			"type": "string"
		},
		{
			"id": "0cbe6480-ca2a-427a-9e66-31b763cd46c0",
			"key": "key",
			"value": "{{root_key}}",
			"type": "string"
		},
		{
			"id": "930dbcc7-7aee-44b6-bcc2-35da92a01ad0",
			"key": "root_key",
			"value": "4KYG4LFV2UGWKC3FYWXNRQMX4FBBBJM6CI",
			"type": "string"
		},
		{
			"id": "477638f9-1f2c-46dc-8998-6e25151595f7",
			"key": "service_key",
			"value": "AN3SRWT2TG2KP2NOSCJ2TPYN2FYHSOE6MU",
			"type": "string"
		},
		{
			"id": "77761c8a-2a3a-463d-b83e-1e21a1b30808",
			"key": "service_id",
			"value": "2107d8d6-c9ec-4fa4-9c4d-d0d095d6ec62",
			"type": "string"
		},
		{
			"id": "c2458ecb-c45b-4f26-a8e5-45b0d61f559d",
			"key": "key_id",
			"value": "7fe29d76-1af8-4364-bf2f-a24e1ac6717c",
			"type": "string"
		},
		{
			"id": "bed23e1c-23e2-4a70-b764-8b62fcd67175",
			"key": "user_id",
			"value": "0039002d-6806-4d04-88d9-bafeaf35a123",
			"type": "string"
		},
		{
			"id": "88a54cdb-2a5c-4dcf-b2c4-81ddb10521c1",
			"key": "user_email",
			"value": "user@example.com",
			"type": "string"
		},
		{
			"id": "4c97c06d-b51e-41b2-be73-c4b34521f0f8",
			"key": "audit_id",
			"value": "5da68099-3d48-4c92-b71e-9d8c0ef1714e",
			"type": "string"
		},
		{
			"id": "d31b20c8-f4ff-4349-b5b9-2f5c6aae2f16",
			"key": "user_access_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiIyMTA3ZDhkNi1jOWVjLTRmYTQtOWM0ZC1kMGQwOTVkNmVjNjIiLCJzdWIiOiJmMDEzYmFhNi04OWNjLTQ4NzMtYTQ5ZS0xZTc2YmJiODI5M2EiLCJleHAiOjE1NzA5NzgyOTEsInhfdHlwZSI6MCwieF9jc3JmIjpudWxsfQ.4NRPIQMZRJP-Su_EoHWSeJClYIwhKjwE_1bRxAQeTqU",
			"type": "string"
		},
		{
			"id": "2828a19e-7d72-4275-84ca-9cbe8bc7912e",
			"key": "user_refresh_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiIyMTA3ZDhkNi1jOWVjLTRmYTQtOWM0ZC1kMGQwOTVkNmVjNjIiLCJzdWIiOiJmMDEzYmFhNi04OWNjLTQ4NzMtYTQ5ZS0xZTc2YmJiODI5M2EiLCJleHAiOjE1NzEwNjEwOTEsInhfdHlwZSI6MSwieF9jc3JmIjoiU1ZaQjZSM0RIVloyUksyUDcySUs2WFpINTZQVlROQ0FEUSJ9.7p6ou_c9GjptwQsOeSpxby8hRyZFUgGu6lummCvlhQE",
			"type": "string"
		},
		{
			"id": "3fd19d8e-e6fa-4336-8a65-12fb0c019f92",
			"key": "user_key",
			"value": "PVYBXVXJATJHIVMNCZORHE3GDUXDJCJCIE",
			"type": "string"
		},
		{
			"id": "ba768e94-bcd4-4cd4-9743-27b172d7c7ee",
			"key": "totp_code",
			"value": "123456",
			"type": "string"
		},
		{
			"id": "7527ee55-a3ab-4925-b688-0ad8481eaff8",
			"key": "user_reset_password_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI0MzhlZjA0Yi1lYzNhLTRlMWQtYWU5My0zYTc5NjVhMjYzMzEiLCJzdWIiOiI4ZDdiM2Q0NC05NGY2LTQ5OTUtOTU0Yi0yMGNlMTlmNjkyM2YiLCJleHAiOjE1NzAwNTAzMzcsInhfdHlwZSI6MiwieF9jc3JmIjoiNUxBT0xHQjI0N1pGWEYzM1pVMkZOVTZMM0hZSDJSQ1JSNCJ9.0rK1R-AswHV19POJEFKlv3yai9YAR8eK5e_6CbfXEPU",
			"type": "string"
		},
		{
			"id": "042269c8-85e0-4b4f-b6e4-254d86b3836c",
			"key": "user_update_password_revoke_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI0MzhlZjA0Yi1lYzNhLTRlMWQtYWU5My0zYTc5NjVhMjYzMzEiLCJzdWIiOiI4ZDdiM2Q0NC05NGY2LTQ5OTUtOTU0Yi0yMGNlMTlmNjkyM2YiLCJleHAiOjE1NzA2NTIyOTQsInhfdHlwZSI6NCwieF9jc3JmIjoiRlRINERLUUU1S1M3RjVVUExYUkFCNkJPWEJDRUdIRlUyRSJ9.BG3cBT5s3GdCjJ3Wlc4F88P4oBfybzTvi6xgs0rQ_Cc",
			"type": "string"
		},
		{
			"id": "b109181f-622f-4144-ac98-e88ab58c906f",
			"key": "user_update_email_revoke_token",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI0MzhlZjA0Yi1lYzNhLTRlMWQtYWU5My0zYTc5NjVhMjYzMzEiLCJzdWIiOiI4ZDdiM2Q0NC05NGY2LTQ5OTUtOTU0Yi0yMGNlMTlmNjkyM2YiLCJleHAiOjE1NzA2NTIxNTUsInhfdHlwZSI6MywieF9jc3JmIjoiSEk1VEpaMzdBRUpJTU9UUUNEVlgyVUlLNVZRUTZSTUYyNCJ9.4Me_J7HUmLZQ4-OJTq5xyV5JNmaO-ZdvfD2UbiJ_kBY",
			"type": "string"
		},
		{
			"id": "2494b8ef-18e7-4bf4-9c6d-798edec0b690",
			"key": "csrf_key",
			"value": "V6FKGIP3OFG4AARS4QMG6PWFNHQP6FNQFM",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}